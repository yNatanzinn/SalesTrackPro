# Projeto: neitansh_app_vendas — Web App Mobile para registro de vendas

**Resumo rápido:** Aplicação PHP + MySQL (compatível com cPanel) com front-end responsivo (Bootstrap 5) para registrar vendas por **vendedor** (cada vendedor age como loja separada). Inclui login, dashboard com gráficos (período editável), CRUD de produtos, carrinho, registro de vendas (pagas/pendentes), gerenciamento de pendências (parciais / completas), pesquisa de clientes com pendência para juntar dívidas, painel com totais (com botão olho para esconder valor) e tema escuro.

> **Observação:** entregue em arquivos PHP/JS/CSS prontos para enviar ao `public_html` no cPanel. O banco `neitansh_app_vendas` já existe — abaixo está o SQL para criar as tabelas e o usuário admin inicial `Neitan`.

---

## Estrutura de arquivos (coloque tudo dentro de `public_html/neitansh_app_vendas/`)

```
neitansh_app_vendas/
├─ api/
│  ├─ login.php
│  ├─ logout.php
│  ├─ register_user.php
│  ├─ products.php
│  ├─ sales.php
│  ├─ payments.php
│  ├─ stats.php
│  └─ helpers.php
├─ assets/
│  ├─ css/style.css
│  └─ js/app.js
├─ config.php
├─ index.php           (login)
├─ app.php             (dashboard + SPA behaviour)
└─ README_deploy.txt
```

---

# 1) SQL — Criação de tabelas e usuário inicial

Execute este SQL no phpMyAdmin (selecionando o banco `neitansh_app_vendas`) ou via terminal MySQL:

```sql
-- Tabelas principais
CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  username VARCHAR(50) NOT NULL UNIQUE,
  password VARCHAR(255) NOT NULL,
  display_name VARCHAR(100) DEFAULT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE products (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT NOT NULL,
  name VARCHAR(255) NOT NULL,
  price DECIMAL(10,2) NOT NULL DEFAULT 0.00,
  stock INT NOT NULL DEFAULT 0,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE sales (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT NOT NULL,
  client_name VARCHAR(255) DEFAULT NULL,
  total DECIMAL(12,2) NOT NULL DEFAULT 0.00,
  status ENUM('paid','pending') NOT NULL DEFAULT 'paid',
  payment_method ENUM('pix','cartao','dinheiro') DEFAULT NULL,
  card_type ENUM('credito','debito') DEFAULT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE sale_items (
  id INT AUTO_INCREMENT PRIMARY KEY,
  sale_id INT NOT NULL,
  product_id INT NOT NULL,
  quantity INT NOT NULL DEFAULT 1,
  unit_price DECIMAL(10,2) NOT NULL,
  FOREIGN KEY (sale_id) REFERENCES sales(id) ON DELETE CASCADE,
  FOREIGN KEY (product_id) REFERENCES products(id) ON DELETE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Quando uma venda fica pendente, podemos registrar pagamentos parciais
CREATE TABLE payments (
  id INT AUTO_INCREMENT PRIMARY KEY,
  sale_id INT NOT NULL,
  amount DECIMAL(12,2) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (sale_id) REFERENCES sales(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Índices úteis
CREATE INDEX idx_products_user ON products(user_id);
CREATE INDEX idx_sales_user ON sales(user_id);

-- Usuário inicial (Neitan) — senha: #Frank781 (hash bcrypt)
INSERT INTO users (username, password, display_name)
VALUES ('Neitan', '$2b$12$sbkDkRtMFzEtWPoaCvE6rescdtZalEaPzwf.98EPOZTfQVhEnpVym', 'Neitan');

-- Observação: a senha acima é o hash bcrypt do valor "#Frank781".
```

---

# 2) Configuração PHP (arquivo `config.php`)

```php
<?php
// config.php
// Atualize as credenciais do DB conforme o seu cPanel
$db_host = 'localhost';
$db_name = 'neitansh_app_vendas';
$db_user = 'SEU_DB_USER';
$db_pass = 'SUA_SENHA_DO_DB';

try {
  $pdo = new PDO("mysql:host=$db_host;dbname=$db_name;charset=utf8mb4", $db_user, $db_pass, [
    PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
  ]);
} catch (Exception $e) {
  http_response_code(500);
  echo json_encode(['error' => 'DB connection error', 'msg' => $e->getMessage()]);
  exit;
}

session_start();

function require_auth() {
  if (empty($_SESSION['user_id'])) {
    http_response_code(401);
    echo json_encode(['error' => 'unauthenticated']);
    exit;
  }
}

function current_user_id() {
  return $_SESSION['user_id'] ?? null;
}
```

---

# 3) API: helpers e endpoints

### `api/helpers.php`

```php
<?php
require_once __DIR__ . '/../config.php';
header('Content-Type: application/json; charset=utf-8');
// helper functions used by API endpoints
function json($data){
  echo json_encode($data);
  exit;
}
```

### `api/login.php`

```php
<?php
require_once 'helpers.php';
$data = json_decode(file_get_contents('php://input'), true);
if (!isset($data['username'],$data['password'])) json(['error'=>'missing_fields']);
$stmt = $pdo->prepare('SELECT * FROM users WHERE username = ? LIMIT 1');
$stmt->execute([$data['username']]);
$user = $stmt->fetch();
if (!$user || !password_verify($data['password'], $user['password'])) json(['error'=>'invalid_credentials']);
// success
$_SESSION['user_id'] = $user['id'];
$_SESSION['username'] = $user['username'];
json(['ok'=>true,'user'=>['id'=>$user['id'],'username'=>$user['username'],'display_name'=>$user['display_name']]]);
```

### `api/logout.php`

```php
<?php
require_once 'helpers.php';
session_destroy();
json(['ok'=>true]);
```

### `api/register_user.php`  (somente usuário Neitan pode criar novos vendedores)

```php
<?php
require_once 'helpers.php';
require_auth();
$me_id = current_user_id();
// check if current user username == 'Neitan'
$stmt = $pdo->prepare('SELECT username FROM users WHERE id = ?');
$stmt->execute([$me_id]);
$row = $stmt->fetch();
if (!$row || $row['username'] !== 'Neitan') json(['error'=>'forbidden']);
$data = json_decode(file_get_contents('php://input'), true);
if (!isset($data['username'],$data['password'])) json(['error'=>'missing']);
// create user
$hash = password_hash($data['password'], PASSWORD_DEFAULT);
$stmt = $pdo->prepare('INSERT INTO users (username,password,display_name) VALUES (?,?,?)');
$stmt->execute([$data['username'],$hash,$data['display_name'] ?? null]);
json(['ok'=>true,'id'=>$pdo->lastInsertId()]);
```

### `api/products.php` (GET list, POST create, PUT edit, DELETE remove)

```php
<?php
require_once 'helpers.php';
$uid = current_user_id();
$method = $_SERVER['REQUEST_METHOD'];
if ($method === 'GET'){
  $q = $pdo->prepare('SELECT id,name,price,stock,created_at FROM products WHERE user_id = ?');
  $q->execute([$uid]);
  json(['ok'=>true,'products'=>$q->fetchAll()]);
}
$body = json_decode(file_get_contents('php://input'), true);
if ($method === 'POST'){
  // create
  $stmt = $pdo->prepare('INSERT INTO products (user_id,name,price,stock) VALUES (?,?,?,?)');
  $stmt->execute([$uid,$body['name'],$body['price'],$body['stock']]);
  json(['ok'=>true,'id'=>$pdo->lastInsertId()]);
}
if ($method === 'PUT'){
  $stmt = $pdo->prepare('UPDATE products SET name=?,price=?,stock=? WHERE id=? AND user_id=?');
  $stmt->execute([$body['name'],$body['price'],$body['stock'],$body['id'],$uid]);
  json(['ok'=>true]);
}
if ($method === 'DELETE'){
  // expecting ?id=xx
  $id = $_GET['id'] ?? null;
  $stmt = $pdo->prepare('DELETE FROM products WHERE id=? AND user_id=?');
  $stmt->execute([$id,$uid]);
  json(['ok'=>true]);
}
```

### `api/sales.php` (registro de venda, listar vendas, obter venda por cliente/pendentes)

```php
<?php
require_once 'helpers.php';
$uid = current_user_id();
$method = $_SERVER['REQUEST_METHOD'];
if ($method === 'GET'){
  // optional filters: ?pending=1 or ?exclude_pending=1 or ?client=name or ?from=YYYY-MM-DD&to=YYYY-MM-DD
  $pending = isset($_GET['pending']) ? 1 : null;
  $exclude_pending = isset($_GET['exclude_pending']) ? 1 : null;
  $params = [$uid];
  $sql = 'SELECT * FROM sales WHERE user_id = ?';
  if ($pending) { $sql .= ' AND status = "pending"'; }
  if ($exclude_pending) { $sql .= ' AND status != "pending"'; }
  if (!empty($_GET['client'])){
    $sql .= ' AND client_name LIKE ?';
    $params[] = '%'.$_GET['client'].'%';
  }
  if (!empty($_GET['from']) && !empty($_GET['to'])){
    $sql .= ' AND created_at BETWEEN ? AND ?';
    $params[] = $_GET['from'].' 00:00:00';
    $params[] = $_GET['to'].' 23:59:59';
  }
  $q = $pdo->prepare($sql);
  $q->execute($params);
  $sales = $q->fetchAll();
  // fetch items for each sale
  foreach ($sales as &$s){
    $q2 = $pdo->prepare('SELECT si.*, p.name FROM sale_items si JOIN products p ON p.id = si.product_id WHERE si.sale_id = ?');
    $q2->execute([$s['id']]);
    $s['items'] = $q2->fetchAll();
    // compute paid so far
    $q3 = $pdo->prepare('SELECT SUM(amount) as paid FROM payments WHERE sale_id = ?');
    $q3->execute([$s['id']]);
    $r = $q3->fetch();
    $s['paid'] = $r['paid'] ?? 0;
  }
  json(['ok'=>true,'sales'=>$sales]);
}
if ($method === 'POST'){
  // create sale: expects user_id from session, fields: items [{product_id,quantity}], status, client_name, payment_method, card_type
  $body = json_decode(file_get_contents('php://input'), true);
  $items = $body['items'] ?? [];
  $status = $body['status'] ?? 'paid';
  $client = $body['client_name'] ?? null;
  $pm = $body['payment_method'] ?? null;
  $card_type = $body['card_type'] ?? null;

  // compute total & reduce stock
  $total = 0;
  foreach ($items as $it){
    $stmt = $pdo->prepare('SELECT price,stock FROM products WHERE id=? AND user_id=?');
    $stmt->execute([$it['product_id'],$uid]);
    $p = $stmt->fetch();
    if (!$p) json(['error'=>'product_not_found']);
    if ($p['stock'] < $it['quantity']) {
      json(['error'=>'insufficient_stock','product'=>$it['product_id']]);
    }
    $total += $p['price'] * $it['quantity'];
  }
  // create sale
  $stmt = $pdo->prepare('INSERT INTO sales (user_id, client_name, total, status, payment_method, card_type) VALUES (?,?,?,?,?,?)');
  $stmt->execute([$uid,$client,$total,$status,$pm,$card_type]);
  $sale_id = $pdo->lastInsertId();
  // add items and update stock
  $stmtItem = $pdo->prepare('INSERT INTO sale_items (sale_id,product_id,quantity,unit_price) VALUES (?,?,?,?)');
  $stmtUpdateStock = $pdo->prepare('UPDATE products SET stock = stock - ? WHERE id = ? AND user_id = ?');
  foreach ($items as $it){
    // get price again
    $stmtP = $pdo->prepare('SELECT price FROM products WHERE id=?');
    $stmtP->execute([$it['product_id']]);
    $price = $stmtP->fetchColumn();
    $stmtItem->execute([$sale_id,$it['product_id'],$it['quantity'],$price]);
    $stmtUpdateStock->execute([$it['quantity'],$it['product_id'],$uid]);
  }
  // if already paid (status == paid) register a single payment record
  if ($status === 'paid'){
    $stmtPay = $pdo->prepare('INSERT INTO payments (sale_id,amount) VALUES (?,?)');
    $stmtPay->execute([$sale_id,$total]);
  }
  json(['ok'=>true,'sale_id'=>$sale_id]);
}
```

### `api/payments.php` (registrar pagamento parcial/completo)

```php
<?php
require_once 'helpers.php';
$uid = current_user_id();
$method = $_SERVER['REQUEST_METHOD'];
if ($method === 'POST'){
  $body = json_decode(file_get_contents('php://input'), true);
  $sale_id = $body['sale_id'];
  $amount = $body['amount'];
  // verify sale belongs to user
  $q = $pdo->prepare('SELECT * FROM sales WHERE id=? AND user_id=?');
  $q->execute([$sale_id,$uid]);
  $sale = $q->fetch();
  if (!$sale) json(['error'=>'not_found']);
  $stmt = $pdo->prepare('INSERT INTO payments (sale_id,amount) VALUES (?,?)');
  $stmt->execute([$sale_id,$amount]);
  // if now fully paid, update status
  $q2 = $pdo->prepare('SELECT SUM(amount) as total_paid FROM payments WHERE sale_id=?');
  $q2->execute([$sale_id]);
  $paid = $q2->fetchColumn();
  if ($paid >= $sale['total']){
    $u = $pdo->prepare('UPDATE sales SET status = "paid" WHERE id=?');
    $u->execute([$sale_id]);
  }
  json(['ok'=>true,'paid'=>$paid]);
}
```

### `api/stats.php` (para gráficos: vendas por período, por método de pagamento, produtos vendidos)

```php
<?php
require_once 'helpers.php';
$uid = current_user_id();
// GET?from=YYYY-MM-DD&to=YYYY-MM-DD -> returns sales per day and payments per method and products sold
$from = $_GET['from'] ?? date('Y-m-01');
$to = $_GET['to'] ?? date('Y-m-d');
// sales per day
$q = $pdo->prepare('SELECT DATE(created_at) as day, SUM(total) as total FROM sales WHERE user_id=? AND created_at BETWEEN ? AND ? GROUP BY day ORDER BY day');
$q->execute([$uid, $from.' 00:00:00', $to.' 23:59:59']);
$sales_by_day = $q->fetchAll();
// payments per method
$q2 = $pdo->prepare('SELECT payment_method, SUM(total) as total FROM sales WHERE user_id=? AND created_at BETWEEN ? AND ? GROUP BY payment_method');
$q2->execute([$uid, $from.' 00:00:00', $to.' 23:59:59']);
$by_method = $q2->fetchAll();
// products sold (quantity)
$q3 = $pdo->prepare('SELECT p.name, SUM(si.quantity) as qty FROM sale_items si JOIN sales s ON s.id = si.sale_id JOIN products p ON p.id = si.product_id WHERE s.user_id=? AND s.created_at BETWEEN ? AND ? GROUP BY p.id ORDER BY qty DESC');
$q3->execute([$uid, $from.' 00:00:00', $to.' 23:59:59']);
$products_sold = $q3->fetchAll();
json(['ok'=>true,'sales_by_day'=>$sales_by_day,'by_method'=>$by_method,'products_sold'=>$products_sold]);
```

---

# 4) Front-end

### `index.php` — página de login

```php
<?php
require_once 'config.php';
if (!empty($_SESSION['user_id'])) {
  header('Location: app.php');
  exit;
}
?>
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Login - Neitan Vendas</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="assets/css/style.css">
</head>
<body class="d-flex align-items-center justify-content-center vh-100">
  <div class="card p-4" style="width:100%;max-width:420px;">
    <h3 class="mb-3">Entrar</h3>
    <div id="alert" class="alert d-none"></div>
    <div class="mb-3">
      <label class="form-label">Usuário</label>
      <input id="username" class="form-control" />
    </div>
    <div class="mb-3">
      <label class="form-label">Senha</label>
      <input id="password" type="password" class="form-control" />
    </div>
    <div class="d-grid">
      <button id="btnLogin" class="btn btn-primary">Entrar</button>
    </div>
  </div>

<script>
document.getElementById('btnLogin').addEventListener('click', async ()=>{
  const u = document.getElementById('username').value;
  const p = document.getElementById('password').value;
  const res = await fetch('api/login.php',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({username:u,password:p})});
  const j = await res.json();
  if (j.ok) location.href='app.php';
  else {
    const a = document.getElementById('alert'); a.className='alert alert-danger'; a.innerText= j.error || 'Login inválido'; a.classList.remove('d-none');
  }
});
</script>
</body>
</html>
```

### `app.php` — SPA principal (dashboard, pendentes, vendas, produtos)

This file contains the HTML frame, menu tabs, dark-theme toggle, and loads `assets/js/app.js` which implements the UI logic.

```php
<?php
require_once 'config.php';
if (empty($_SESSION['user_id'])) {
  header('Location: index.php'); exit;
}
?>
<!doctype html>
<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>EasyDash - Neitan Vendas</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="assets/css/style.css">
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.3.0/dist/chart.umd.min.js"></script>
</head>
<body class="theme-light">
<nav class="navbar navbar-expand-lg navbar-light bg-light">
  <div class="container-fluid">
    <a class="navbar-brand" href="#">EasyDash</a>
    <div class="d-flex align-items-center">
      <button id="btnTheme" class="btn btn-outline-secondary me-2" title="Tema escuro">🌓</button>
      <button id="btnLogout" class="btn btn-outline-danger">Sair</button>
    </div>
  </div>
</nav>
<div class="container-fluid py-3">
  <div class="row">
    <div class="col-12 mb-3">
      <div class="d-flex justify-content-between align-items-center">
        <div>
          <h4>Dashboard</h4>
          <small id="userLabel"><?php echo htmlspecialchars($_SESSION['username']); ?></small>
        </div>
        <div class="text-end">
          <div>Total vendidos: <strong id="totalPaid">R$ 0,00</strong> <button id="toggleEye" class="btn btn-sm btn-outline-secondary">👁️</button></div>
          <div>Tot. pendente: <strong id="totalPending">R$ 0,00</strong></div>
        </div>
      </div>
    </div>
    <div class="col-12 mb-3">
      <div class="card p-3">
        <div class="d-flex gap-2 mb-2">
          <input id="from" type="date" class="form-control form-control-sm" />
          <input id="to" type="date" class="form-control form-control-sm" />
          <button id="btnRefreshStats" class="btn btn-primary btn-sm">Atualizar</button>
        </div>
        <canvas id="chartSales"></canvas>
      </div>
    </div>
    <div class="col-md-6 mb-3">
      <div class="card p-3">
        <h6>Valor por método de pagamento</h6>
        <canvas id="chartMethods"></canvas>
      </div>
    </div>
    <div class="col-md-6 mb-3">
      <div class="card p-3">
        <h6>Produtos vendidos (quantidade)</h6>
        <canvas id="chartProducts"></canvas>
      </div>
    </div>

    <div class="col-12 mb-3">
      <div class="card p-3">
        <div class="d-flex justify-content-between">
          <h5>Registrar Venda</h5>
          <div>
            <button id="btnOpenProducts" class="btn btn-success btn-sm">Adicionar Produtos</button>
            <button id="btnViewPendentes" class="btn btn-warning btn-sm">Pendentes</button>
            <button id="btnViewVendas" class="btn btn-secondary btn-sm">Vendas</button>
          </div>
        </div>
        <div id="productsList" class="mt-3"></div>
        <hr />
        <div>
          <h6>Carrinho</h6>
          <div id="cartItems"></div>
          <div class="mt-2">
            <button id="btnNextToCheckout" class="btn btn-primary" disabled>Próximo</button>
          </div>
        </div>
      </div>
    </div>

    <div id="modalArea"></div>

  </div>
</div>

<script src="assets/js/app.js"></script>
</body>
</html>
```

### `assets/css/style.css`

```css
body.theme-dark { background:#0b1220; color:#e6eef8 }
body.theme-dark .card { background:#0f1724; color:#e6eef8 }
body.theme-light { background:#f8f9fa }
.small-muted { color:#6c757d }
```

### `assets/js/app.js` — frontend logic (simplificado, mas funcional)

```javascript
// assets/js/app.js
// NOTE: This file implements the front-end interactions: carregar produtos, carrinho, checkout, gráficos
let CART = [];
let PRODUCTS = [];
let charts = {};

async function api(path, opts){
  const r = await fetch('api/'+path, opts);
  return r.json();
}

// theme
document.getElementById('btnTheme').addEventListener('click', ()=>{
  document.body.classList.toggle('theme-dark');
});

// logout
document.getElementById('btnLogout').addEventListener('click', async ()=>{
  await api('logout.php',{method:'POST'});
  location.href='index.php';
});

// totals eye
let hidden = false;
document.getElementById('toggleEye').addEventListener('click', ()=>{
  hidden = !hidden;
  document.getElementById('totalPaid').innerText = hidden ? 'R$ -----' : window._lastTotalsPaid || 'R$ 0,00';
});

// load products
async function loadProducts(){
  const j = await api('products.php');
  if (j.ok){ PRODUCTS = j.products; renderProducts(); }
}

function renderProducts(){
  const el = document.getElementById('productsList');
  el.innerHTML='';
  PRODUCTS.forEach(p=>{
    const row = document.createElement('div');
    row.className='d-flex align-items-center justify-content-between mb-2';
    row.innerHTML = `<div><strong>${p.name}</strong> <div class='small-muted'>R$ ${Number(p.price).toFixed(2)} | estoque: ${p.stock}</div></div>
      <div>
        <button class='btn btn-sm btn-outline-secondary me-1' data-id='${p.id}' data-act='add'>+</button>
        <button class='btn btn-sm btn-outline-danger' data-id='${p.id}' data-act='minus'>-</button>
      </div>`;
    el.appendChild(row);
  });
  el.querySelectorAll('button').forEach(b=>{
    b.addEventListener('click', ()=>{
      const id = b.getAttribute('data-id');
      const act = b.getAttribute('data-act');
      if (act === 'add') addToCart(parseInt(id));
      else removeFromCart(parseInt(id));
    });
  });
}

function addToCart(id){
  const prod = PRODUCTS.find(p=>p.id==id);
  if(!prod) return;
  const it = CART.find(c=>c.product_id==id);
  if(it){ if(it.quantity < prod.stock) it.quantity++; }
  else CART.push({product_id:id,quantity:1, name:prod.name, unit_price:Number(prod.price)});
  renderCart();
}
function removeFromCart(id){
  const idx = CART.findIndex(c=>c.product_id==id);
  if (idx>=0){ CART.splice(idx,1); renderCart(); }
}

function renderCart(){
  const el = document.getElementById('cartItems');
  el.innerHTML='';
  let total = 0;
  CART.forEach(c=>{
    total += c.unit_price*c.quantity;
    const d = document.createElement('div');
    d.className='d-flex justify-content-between mb-1';
    d.innerHTML = `<div>${c.name} x ${c.quantity}</div><div>R$ ${ (c.unit_price*c.quantity).toFixed(2) }</div>`;
    el.appendChild(d);
  });
  document.getElementById('btnNextToCheckout').disabled = CART.length===0;
}

// checkout step
document.getElementById('btnNextToCheckout').addEventListener('click', ()=>{
  // show modal to choose paid/pending and client name if pending and payment method
  openCheckoutModal();
});

function openCheckoutModal(){
  const modal = document.createElement('div');
  modal.className='modal-backdrop position-fixed top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center';
  modal.style.background='rgba(0,0,0,0.4)';
  modal.innerHTML = `<div class='card p-3' style='width:100%;max-width:420px;'>
    <h5>Finalizar venda</h5>
    <div class='mb-2'>
      <label class='form-label'>Status</label>
      <select id='saleStatus' class='form-select'><option value='paid'>Pago</option><option value='pending'>Pendente</option></select>
    </div>
    <div id='clientBox' class='mb-2 d-none'>
      <label class='form-label'>Nome do cliente</label>
      <input id='clientName' class='form-control' />
    </div>
    <div class='mb-2'>
      <label class='form-label'>Forma de pagamento</label>
      <select id='payMethod' class='form-select'><option value='pix'>Pix</option><option value='cartao'>Cartão</option><option value='dinheiro'>Dinheiro</option></select>
    </div>
    <div id='cardTypeBox' class='mb-2 d-none'>
      <label class='form-label'>Cartão</label>
      <select id='cardType' class='form-select'><option value='credito'>Crédito</option><option value='debito'>Débito</option></select>
    </div>
    <div class='d-flex justify-content-end gap-2'>
      <button id='cancelModal' class='btn btn-secondary btn-sm'>Cancelar</button>
      <button id='confirmSale' class='btn btn-primary btn-sm'>Registrar Venda</button>
    </div>
  </div>`;
  document.body.appendChild(modal);
  modal.querySelector('#saleStatus').addEventListener('change',(e)=>{
    const v = e.target.value;
    modal.querySelector('#clientBox').classList.toggle('d-none', v!=='pending');
  });
  modal.querySelector('#payMethod').addEventListener('change',(e)=>{
    modal.querySelector('#cardTypeBox').classList.toggle('d-none', e.target.value!=='cartao');
  });
  modal.querySelector('#cancelModal').addEventListener('click', ()=> modal.remove());
  modal.querySelector('#confirmSale').addEventListener('click', async ()=>{
    const status = modal.querySelector('#saleStatus').value;
    const client = modal.querySelector('#clientName').value || null;
    const pm = modal.querySelector('#payMethod').value;
    const cardType = modal.querySelector('#cardType').value || null;
    const body = { items: CART.map(c=>({product_id:c.product_id,quantity:c.quantity})), status, client_name: client, payment_method: pm, card_type: cardType };
    const j = await api('sales.php',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(body)});
    if (j.ok){ CART = []; renderCart(); modal.remove(); loadProducts(); refreshStats(); alert('Venda registrada!'); }
    else alert(JSON.stringify(j));
  });
}

// pending view
document.getElementById('btnViewPendentes').addEventListener('click', async ()=>{
  const j = await api('sales.php?pending=1');
  if (!j.ok) return alert('erro');
  let html = '<h5>Pendentes</h5>';
  j.sales.forEach(s=>{
    const pending = (s.total - (s.paid||0)).toFixed(2);
    html += `<div class='card p-2 mb-2'>
      <div class='d-flex justify-content-between'><div><strong>${s.client_name||'--'}</strong><div class='small-muted'>Total: R$ ${s.total} | Pago: R$ ${s.paid||0}</div></div>
      <div>
        <button class='btn btn-sm btn-success' data-id='${s.id}' data-act='partial'>Registrar Parcial</button>
        <button class='btn btn-sm btn-primary' data-id='${s.id}' data-act='full'>Registrar Total</button>
      </div></div>
    </div>`;
  });
  const modal = document.createElement('div');
  modal.className='position-fixed top-0 start-0 w-100 h-100 p-3';
  modal.style.background='rgba(0,0,0,0.4)';
  modal.innerHTML = `<div class='container' style='max-width:720px;'><div class='card p-3'>${html}<div class='text-end'><button id='closePend' class='btn btn-secondary'>Fechar</button></div></div></div>`;
  document.body.appendChild(modal);
  modal.querySelectorAll('button[data-act]').forEach(b=>{
    b.addEventListener('click', async ()=>{
      const act = b.getAttribute('data-act'); const id = b.getAttribute('data-id');
      if (act==='full'){
        if (!confirm('Tem certeza que quer registrar o pagamento completo?')) return;
        // fetch sale to know remaining
        const sres = await api('sales.php?');
        const sale = sres.sales.find(x=>x.id==id);
        const remaining = Number(sale.total) - Number(sale.paid||0);
        await api('payments.php',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({sale_id:id,amount:remaining})});
        alert('Pagamento completo registrado');
        modal.remove(); refreshStats();
      } else {
        const val = prompt('Valor a registrar (R$)');
        if (!val) return;
        await api('payments.php',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({sale_id:id,amount:val})});
        alert('Pagamento parcial registrado'); modal.remove(); refreshStats();
      }
    });
  });
  modal.querySelector('#closePend').addEventListener('click', ()=> modal.remove());
});

// view vendas (non-pending)
document.getElementById('btnViewVendas').addEventListener('click', async ()=>{
  const j = await api('sales.php?exclude_pending=1');
  let html = '<h5>Vendas</h5>';
  j.sales.forEach(s=>{
    html += `<div class='card p-2 mb-2'><div><strong>${s.client_name||'--'}</strong> <div class='small-muted'>R$ ${s.total} - ${s.payment_method||''} - ${s.created_at}</div></div></div>`;
  });
  const modal = document.createElement('div'); modal.className='position-fixed top-0 start-0 w-100 h-100 p-3'; modal.style.background='rgba(0,0,0,0.4)';
  modal.innerHTML = `<div class='container' style='max-width:720px;'><div class='card p-3'>${html}<div class='text-end'><button id='closeV' class='btn btn-secondary'>Fechar</button></div></div></div>`;
  document.body.appendChild(modal);
  modal.querySelector('#closeV').addEventListener('click', ()=> modal.remove());
});

// refresh stats and charts
async function refreshStats(){
  const from = document.getElementById('from').value || (new Date().toISOString().slice(0,10));
  const to = document.getElementById('to').value || (new Date().toISOString().slice(0,10));
  const j = await api(`stats.php?from=${from}&to=${to}`);
  if (!j.ok) return;
  // sales chart
  const labels = j.sales_by_day.map(x=>x.day);
  const data = j.sales_by_day.map(x=>Number(x.total));
  if (!charts.sales){ charts.sales = new Chart(document.getElementById('chartSales'), { type:'line', data:{labels, datasets:[{label:'Vendas', data}] } }); }
  else { charts.sales.data.labels = labels; charts.sales.data.datasets[0].data = data; charts.sales.update(); }

  // methods
  const mlabels = j.by_method.map(x=>x.payment_method || 'outros');
  const mdata = j.by_method.map(x=>Number(x.total));
  if (!charts.methods) charts.methods = new Chart(document.getElementById('chartMethods'),{type:'bar',data:{labels:mlabels,datasets:[{label:'Por método',data:mdata}]}});
  else { charts.methods.data.labels=mlabels; charts.methods.data.datasets[0].data=mdata; charts.methods.update(); }

  // products
  const plabels = j.products_sold.map(x=>x.name);
  const pdata = j.products_sold.map(x=>Number(x.qty));
  if (!charts.products) charts.products = new Chart(document.getElementById('chartProducts'),{type:'bar',data:{labels:plabels,datasets:[{label:'Quantidade',data:pdata}]}});
  else { charts.products.data.labels=plabels; charts.products.data.datasets[0].data=pdata; charts.products.update(); }

  // totals
  let paidTotal = 0, pendingTotal = 0;
  const salesAll = j.sales_by_day.reduce((a,b)=>a+Number(b.total),0);
  // For accurate pending/paid totals, fetch sales list
  const salesList = await api('sales.php');
  salesList.sales.forEach(s=>{ if (s.status==='pending') pendingTotal += (Number(s.total)-(Number(s.paid||0))); else paidTotal += Number(s.total); });
  window._lastTotalsPaid = 'R$ '+paidTotal.toFixed(2);
  document.getElementById('totalPaid').innerText = window._lastTotalsPaid;
  document.getElementById('totalPending').innerText = 'R$ '+pendingTotal.toFixed(2);
}

// initial load
window.addEventListener('load', async ()=>{
  // set default date range (last 7 days)
  const to = new Date();
  const from = new Date(); from.setDate(to.getDate()-6);
  document.getElementById('from').value = from.toISOString().slice(0,10);
  document.getElementById('to').value = to.toISOString().slice(0,10);
  await loadProducts();
  await refreshStats();
});

document.getElementById('btnRefreshStats').addEventListener('click', refreshStats);
```

---

# 5) README_deploy.txt (instruções para cPanel)

```
1) Faça upload da pasta `neitansh_app_vendas` para public_html via File Manager ou FTP.
2) No cPanel -> MySQL Databases -> crie um usuário MySQL e conceda permissão ao DB `neitansh_app_vendas`.
3) Abra o arquivo `config.php` e preencha $db_user e $db_pass com as credenciais geradas.
4) No phpMyAdmin (ou MySQL), execute o SQL do arquivo `schema.sql` (o SQL listado no README acima) se ainda não criou as tabelas.
5) Acesse `https://seusite.com/neitansh_app_vendas/index.php` e entre com o usuário `Neitan` e senha `#Frank781`.
6) Apenas o usuário `Neitan` tem permissão para criar novos vendedores via endpoint `api/register_user.php` (implementado no front-end caso você queira). Outros vendedores terão suas vendas/produtos isolados por user_id.
```

---

# Observações finais e limitações

* O app foi desenvolvido para ser simples de instalar via cPanel sem Node.js. Ele usa PHP 7+/8+ e MySQL.
* Segurança: a autenticação usa `password_hash`/`password_verify`. Em produção, recomendo HTTPS (SSL) e revisar permissões de arquivos.
* Validações no frontend são básicas. Reforce validação no backend conforme necessário.
* Para melhorar UX, pode-se adicionar paginação, upload de imagens de produto e histórico detalhado. Se quiser, eu posso gerar também arquivos separados (cada arquivo pronto para upload) ou compactar tudo em um ZIP com os conteúdos.

Se quiser que eu gere **os arquivos prontos** (conteúdo exato por arquivo em texto pronto para copiar/colar), eu já coloquei tudo neste documento — diga se quer que eu **exporte cada arquivo separadamente no canvas** ou gere um ZIP que você possa baixar.

Próximo passo sugerido (eu consigo fazer agora): eu posso colar o conteúdo de cada arquivo separadamente aqui para você copiar/colar diretamente no cPanel. Deseja que eu faça isso agora?
